import firebase from "../../context/firebaseContext"
import "firebase/auth";
import "firebase/firestore";

let fs = firebase.firestore()

const CLASS_ADMIN = "classAdmins"
const CLASS_ADMIN_SHALLOW = "classAdminsShallow"
const ADMINS = "admins"
const USERS = "users"
const NOTIFICATIONS = "notifications"
const INVITES = "invites"



export default function mTea(){}



export function sendAdminInvite(uid, data){

    let inviteRef = fs.collection(NOTIFICATIONS)
           .doc(ADMINS)
           .collection(INVITES)



    return new Promise((res, rej) => {
        console.log("idAdmin?")
        isClassAdmin(uid, data.gymClassID).then(isAdmin => {
            if(!isAdmin){
                console.log("isSent?")
                isNotificationSent(uid, data.gymClassID)
                .then(isSent => {
                    if(isSent){
                        res("Admin notified already.")
                    }else{

                        console.log("Setting adminf notify data")
                        let doc = inviteRef.doc()

                        doc.set({ ...data, adminInviteID: doc.id })
                        .then(() => { res("Sent admin invite.") })
                        .catch(err => { rej(err) })
                    }
                })
                .catch(err => {
                    rej(err)
                })
            }else{
                res("Already an admin.")
            }
        })

    })
}

function isNotificationSent(uid, gymClassID){
    /* Checks if notifications has been sent to the user for a class invite.

    Queries "notifications/admins/invites/" for uid and gymClassID.
    Returns true if found, otherwise false

    Args:
        uid A string autogenerated for the user.
        gymClassID A string autogenerated for the document.
     */
    return new Promise((res, rej) => {
        console.log("isSent: start")
        fs.collection(NOTIFICATIONS)
        .doc(ADMINS)
        .collection(INVITES)
        .where("uid", "==", uid)
        .where("gymClassID", "==", gymClassID)
        .get().then(ss => {
            console.log("isSent: snapshot")
            if(ss.empty){
                res(false)
            }else{
                res(true)
            }
        },
        err => { rej(err) })
    })
}

export function getUserAdminInvites(uid){
    return fs.collection(NOTIFICATIONS).doc(ADMINS)
        .collection(INVITES).where("uid", "==", uid)
}


export function removeNotification(notify){
    return new Promise((res, rej) => {
        fs.collection(NOTIFICATIONS).doc(ADMINS)
        .collection(INVITES).where("uid", "==", notify.uid)
        .get().then(ss => {
            if(!ss.empty){
                ss.docs.forEach(doc => {
                    if(doc.data().gymClassID === notify.gymClassID){
                        doc.ref.delete()
                    }
                })
            res("Removed notifications.")
            }
            res("No notifications found.")
        },
        err => { rej(err) })
    })
}



export function getClassAdmins(gymClassID){
    return fs.collection(CLASS_ADMIN)
    .where("gymClassID", "==", gymClassID)
}

export function getUserClassAdmins(uid){
    return fs.collection(CLASS_ADMIN)
    .where("uid", "==", uid)
}

export function isClassAdmin (uid, gymClassID){
    return new Promise((res, rej) => {
        fs.collection(CLASS_ADMIN)
        .where("gymClassID", "==", gymClassID)
        .get().then(classSS => {
            if(!classSS.empty){
                classSS.forEach(classDoc => {
                    if(classDoc.data().uid == uid){
                        res(true)
                    }
                })
            }
            res(false)
        },
        err => {
            rej(err)
        })
    })
}

export function setClassAdmin(uid, gymClassID, data){
    return new Promise((res, rej) => {
        isClassAdmin(uid, gymClassID)
        .then(isMember => {
            if(!isMember){
                let doc = fs.collection(CLASS_ADMIN).doc()
                let shallow = fs.collection(CLASS_ADMIN_SHALLOW)
                .doc(data.gymClassID).collection("users").doc(data.uid)

                Promise.all([
                    doc.set({ ...data, classAdminID: doc.id }),
                    shallow.set({uid: data.uid, gymClassID: data.gymClassID, classAdminID: doc.id})
                ])
                .then( () => {
                    res("Added user as an admin.")
                })





                .catch(err => { rej(err) })
            }else{
                res("User is an admin.")
            }
        })
        .catch(err => {
            rej(err)
        })
    })
}

export function removeAdmin(classAdmin){

    return Promise.all([
        fs.collection(CLASS_ADMIN)
        .doc(classAdmin.classAdminID)
        .delete(),

        fs.collection(CLASS_ADMIN_SHALLOW).doc(classAdmin.gymClassID)
        .collection("users").doc(classAdmin.uid)
        .delete()

    ])
}